#!/usr/bin/env bash

# If the user sends a SIGINT, we want to exit the entire script
trap "exit" INT

# This is where docker expects our substrate/polkadot repo to be
cd /build

VERSION=`cat /srtool/VERSION`
GEN="srtool v$VERSION"

LATEST_VERSION=$(curl -s https://gitlab.com/chevdor/srtool/raw/master/VERSION)

# A function to compare versions
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

vercomp $LATEST_VERSION $VERSION 

case $? in
    0) op='=';;
    1) op='>';;
    2) op='<';;
esac

if [[ "$op" == ">" && ! "$*" == *"--json"* ]]; then
    echo "_____________________________________________________________________________________"
    echo ""
    echo "  You are using srtool v$VERSION. A newer version: v$LATEST_VERSION is now available."
    echo "  You should upgrade asap with the following command:"
    echo "    docker images | grep srtool | awk '{ print \$3 }' | xargs docker rmi --force"
    echo "_____________________________________________________________________________________"
fi

# echo $VERSION $op $LATEST_VERSION
# if [[ "$op" == "=" ]]; then
#     echo "You are using the latest version of srtool: v$VERSION"
# fi

# if [[ "$op" == "<" ]]; then
#     echo "You are using srtool v$VERSION, it looks newer than the latest version :)"
# fi

if [[ ! "$*" =~ --json ||  "$*" =~ --app ]]; then
    echo "🧰 Substrate Runtime Toolbox - $GEN 🧰"
    echo "              - by Chevdor -"
fi

# srtool only makes sense when called from a Cargo folder so we check that
if [ ! -f Cargo.toml ]; then
    echo "  !!! The folder on your host computer does not look like a Cargo project. Are you really in your repo?"
    exit 1
fi

if [ ! -z "$VERBOSE" ]; then
    echo "Checking cache size. Give it a few seconds..."
    echo -e "📦 Cache size:" `du -sh $HOME/.cargo`
fi

RUSTCV=`rustc -V`

if [[ ! "$*" =~ --json ||  "$*" =~ --app ]]; then
    echo -e "🏗  Building $PACKAGE as $PROFILE using $RUSTCV" 
    echo -e "⏳ That can take a little while, be patient... subsequent builds will be faster."
    echo -e "   Since you have to wait a little, you may want to learn more about Substrate runtimes:"
    echo -e "   https://substrate.dev/docs/en/#architecture"
fi

# Build the runtime and time it :)
if [[ "$*" =~ --app ]]; then
    COLOR=never
else
    COLOR=always
fi

# As of https://github.com/paritytech/polkadot/pull/2522 we need to cd to the
# runtime directory itself
RUNTIME_NAME="${PACKAGE/-*/}"

pushd "runtime/$RUNTIME_NAME" || exit 1
  CMD="cargo build --features on-chain-release-build --color=$COLOR --$PROFILE --target-dir target/srtool"
  if [ ! -z "$VERBOSE" ]; then
      time $CMD
  else
      if [[ "$*" == *"--json"* && ! "$*" =~ --app ]]; then
          $CMD > /dev/null 2>&1
      else
          $CMD 2>&1
      fi
  fi
popd || exit 1

# The following would be nice but not in rust stable yet
#--out-dir srtool-out

if [[ ! "$*" =~ --json ||  "$*" =~ --app ]]; then
    echo "✨ Your Substrate WASM Runtime is ready! ✨"
fi

#WASM=`find . -type f -name *.wasm | grep $PROFILE | grep -v deps | grep compact | head -1`
WASM=`find runtime/$RUNTIME_NAME/target/srtool/$PROFILE/wbuild/$PACKAGE/*.compact.wasm`
SHA256=0x`shasum -a 256 $WASM | awk '{print $1}'`

SIZE=`wc -c < $WASM`
LENGTH=16
SKIP=`echo $(($SIZE-$LENGTH))`
# Some magic to show the first and last bytes of the blob the same way the UI does when you see
# a setCode coming from a motion or referendum
PREVIEW=`printf "0x"; hexdump -n $LENGTH -ve '1/1 "%.2x"' $WASM; printf "..."; hexdump -n $LENGTH -s $SKIP -ve '1/1 "%.2x"' $WASM`

# Some color definitions
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m'

SZ=`du -sb $WASM | awk '{print $1}'`
KB=$(expr $SZ / 1024)
TMSP=`date --utc +%FT%TZ`
PROP=`substrate-runtime-hasher $WASM`
GIT_TAG=`git describe --tags --abbrev=0`
GIT_COMMIT_REF=`git rev-parse HEAD`
GIT_BRANCH=`git rev-parse --abbrev-ref HEAD`

case "$PACKAGE" in
    *"kusama"*)
        PKG_COLOR='\033[0;36m' # Cyan
        ;; 
    *"polkadot"*)
        PKG_COLOR='\033[0;35m' # Purple
        ;;
    *)
        PKG_COLOR='\033[0;37m' # White
esac

if [[ ! "$*" =~ --json || "$*" =~ --app ]]; then
    JSON=$( jq -n \
        --arg gen "$GEN" \
        --arg rustc "$RUSTCV" \
        --arg bytes "$SZ" \
        --arg wasm "$WASM" \
        --arg prop "$PROP" \
        --arg sha256 "$SHA256" \
        --arg tmsp "$TMSP" \
        --arg pkg "$PACKAGE" \
        --arg git_tag "$GIT_TAG" \
        --arg git_commit_ref "$GIT_COMMIT_REF" \
        --arg git_branch "$GIT_BRANCH" \
        '{
            gen: $gen,
            commit: $git_commit_ref,
            tag: $git_tag, 
            branch: $git_branch,
            tmsp: $tmsp, 
            rustc: $rustc, 
            size: $bytes, 
            pkg: $pkg, 
            prop: $prop, 
            sha256: $sha256, 
            wasm: $wasm
        }' )
    
    # if using --app, the json output fits on a single line
    if [[ "$*" == *"--app"* ]]; then
        echo "$JSON" | jq -c     
    else
        echo "$JSON" | jq
    fi
    
    if [[ "$*" == *"--save"* ]]; then
        REPORT="./target/srtool/srtool-wasm-report-$TMSP.txt"
        echo "$JSON" > $REPORT
        echo "Report saved in $REPORT"
    fi      
else
    echo "Summary:"
    echo "  Generator  : $GEN" 
    echo "  GIT commit : $GIT_COMMIT_REF"
    echo "  GIT tag    : $GIT_TAG"
    echo "  GIT branch : $GIT_BRANCH"
    echo "  Time       : $TMSP" 
    echo "  Rustc      : $RUSTCV" 
    echo "  Size       : $KB KB ($SZ bytes)" 
    echo "  Content    : $PREVIEW" 
  printf "  Package    : ${PKG_COLOR}$PACKAGE${NC}\n"
  printf "  Proposal   : ${YELLOW}$PROP${NC}\n"
    echo "  SHA256     : $SHA256" 
    echo "  Wasm       : $WASM"
fi
